create table Users (U_Id Serial PRIMARY KEY,
U_Name Varchar(150) NOT NULL,
email VARCHAR(250) NOT NULL,
Phone VARCHAR(12) NOT NULL
);
create table Playlist(
P_Id Serial PRIMARY KEY,
P_Name VARCHAR(100) NOT NULL
);
create table User_Playlist(
Id Serial PRIMARY KEY,
User_Id int NOT NULL,
List_Id int NOT NULL,
FOREIGN KEY (User_Id) REFERENCES Users(U_Id),
FOREIGN KEY (List_Id) REFERENCES Playlist(P_Id)
);
create table Artists(
A_Id Serial PRIMARY KEY,
A_Name VARCHAR(150) NOT NULL 
);
create table Genre(
G_Id Serial PRIMARY KEY,
G_Name VARCHAR(50) UNIQUE NOT NULL
);
create table Album(
Album_Id Serial PRIMARY KEY,
Album_Name VARCHAR(100) NOT NULL 
);

create table Songs(
song_Id Serial PRIMARY KEY,
S_Name VARCHAR(100) NOT NULL,
Track_Length_insecs int NOT NULL,
G_Id int NOT NULL,
Album_Id int NOT NULL,
FOREIGN KEY (G_Id) REFERENCES Genre(G_Id),
FOREIGN KEY (Album_Id) REFERENCES Album(Album_Id)
);
create table Playlist_Songs(
Id Serial PRIMARY KEY,
Song_Id int NOT NULL,
Playlist_Id int NOT NULL,
FOREIGN KEY (Song_Id) REFERENCES Songs(song_Id),
FOREIGN KEY(Playlist_Id) REFERENCES Playlist(P_Id)
);
create table Artist_Songs(
Id Serial PRIMARY KEY,
Song_Id int NOT NULL,
Artist_Id int NOT NULL,
FOREIGN KEY (Song_Id) REFERENCES Songs(song_Id),
FOREIGN KEY (Artist_Id) REFERENCES Artists(A_Id)
);